class CountryArea(models.Model):
    country_area_id = models.AutoField(primary_key=True)
    country_area_name = models.CharField(unique=True, max_length=100)
    m49_code = models.SmallIntegerField()
    iso_alpha3_code = models.CharField(max_length=3)
    location = models.ForeignKey('Location', on_delete=models.PROTECT)
    dev_status = models.ForeignKey('DevStatus', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'country_area'
        ordering = ['country_area_name']
        verbose_name = 'UNSD M49 Country or Area'
        verbose_name_plural = 'UNSD M49 Countries or Areas'

    def __str__(self):
        return self.country_area_name


class Location(models.Model):
    location_id = models.AutoField(primary_key=True, unique=True)
    planet = models.ForeignKey('Planet', on_delete=models.PROTECT)
    region = models.ForeignKey('Region', on_delete=models.PROTECT, blank=True, null=True)
    sub_region = models.ForeignKey('SubRegion', on_delete=models.PROTECT, blank=True, null=True)
    intermediate_region = models.ForeignKey('IntermediateRegion', on_delete=models.PROTECT, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'location'
        ordering = ['location_id']
        verbose_name = 'Location'
        verbose_name_plural = 'Locations'

    def __str__(self):
        return ("{} {} {} {}".format(self.planet, self.region, self.sub_region, self.intermediate_region))


class Region(models.Model):
    region_id = models.AutoField(primary_key=True)
    region_name = models.CharField(unique=True, max_length=100)
    planet = models.ForeignKey('Planet', on_delete=models.PROTECT)


    class Meta:
        managed = False
        db_table = 'region'
        ordering = ['region_name']
        verbose_name = 'UNSD M49 Region'
        verbose_name_plural = 'UNSD M49 Regions'

    def __str__(self):
        return self.region_name


--------------------------------------------------------------------------------------------
Is MAX() faster than sorting by area and using Limit 1? The below code returns Air and Ténéré Natural Reserves but it runs a little weird in terminal. Works fine in the MySQL Workbench.
--------------------------------------------------------------------------------------------

SELECT area_hectares as 'area (hectares)', region_name as 'region', sub_region_name as 'subregion', country_area_name as 'country / area', site_name as 'heritage site'

	FROM heritage_site hs

		LEFT JOIN heritage_site_jurisdiction hsj
		ON hs.heritage_site_id = hsj.heritage_site_id

		LEFT JOIN country_area ca
		ON hsj.country_area_id = ca.country_area_id

		LEFT JOIN location lo
		ON lo.location_id = ca.location_id

		LEFT JOIN region re
		ON re.region_id = lo.region_id

		LEFT JOIN sub_region sr
		ON sr.sub_region_id = lo.sub_region_id

	WHERE region_name = 'Africa' 

		AND hs.area_hectares = (SELECT MAX(hs1.area_hectares)
	    
		FROM heritage_site hs1 

			LEFT JOIN heritage_site_jurisdiction hsj1
			ON hs1.heritage_site_id = hsj1.heritage_site_id

			LEFT JOIN country_area ca1
			ON hsj1.country_area_id = ca1.country_area_id

			LEFT JOIN location lo1
			ON lo1.location_id = ca1.location_id

			LEFT JOIN region re1
			ON re1.region_id = lo1.region_id

		WHERE region_name = 'Africa');

\G

+-----------------+--------+--------------------+----------------+------------------------------------+
| area (hectares) | region | subregion          | country / area | heritage site                      |
+-----------------+--------+--------------------+----------------+------------------------------------+
|         7736000 | Africa | Sub-Saharan Africa | Niger          | Air and Ténéré Natural Reserves    |
+-----------------+--------+--------------------+----------------+------------------------------------+
1 row in set (0.01 sec)





---------------------------------------------------------------------------

from heritagesites.models import Location, Region, CountryArea, DevStatus
from django.db.models import Count
from django.db.models import F

loc = Location.objects.values(region_name = F('region__region_name'), dev_status = F('countryarea__dev_status__dev_status_name')).annotate(count=Count('countryarea__dev_status__dev_status_name')).filter(region__region_name = 'Asia').order_by('countryarea__dev_status__dev_status_name')

for i in loc:
	print(i)

